/*! tsParticles Infection Plugin v2.0.6 by Matteo Bruni */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("@tsparticles/engine"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine"],t);else{var i="object"==typeof exports?t(require("@tsparticles/engine")):t(e.window);for(var n in i)("object"==typeof exports?exports:e)[n]=i[n]}}(this,(function(e){return function(){"use strict";var t={383:function(t){t.exports=e}},i={};function n(e){var o=i[e];if(void 0!==o)return o.exports;var a=i[e]={exports:{}};return t[e](a,a.exports,n),a.exports}n.d=function(e,t){for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return function(){n.r(o),n.d(o,{loadInfectionPlugin:function(){return l}});var e=n(383);class t{constructor(){this.color=new e.OptionsColor,this.color.value="#ff0000",this.radius=0,this.rate=1}load(t){void 0!==t&&(void 0!==t.color&&(this.color=e.OptionsColor.create(this.color,t.color)),this.duration=t.duration,this.infectedStage=t.infectedStage,void 0!==t.radius&&(this.radius=t.radius),void 0!==t.rate&&(this.rate=t.rate))}}class i{constructor(){this.cure=!1,this.delay=0,this.enable=!1,this.infections=0,this.stages=[]}load(e){void 0!==e&&(void 0!==e.cure&&(this.cure=e.cure),void 0!==e.delay&&(this.delay=e.delay),void 0!==e.enable&&(this.enable=e.enable),void 0!==e.infections&&(this.infections=e.infections),void 0!==e.stages&&(this.stages=e.stages.map((e=>{const i=new t;return i.load(e),i}))))}}class a{constructor(e){this.container=e}startInfection(e,t){t>this.container.actualOptions.infection.stages.length||t<0||(e.infection.delay=0,e.infection.delayStage=t)}updateInfectionStage(e,t){t>this.container.actualOptions.infection.stages.length||t<0||void 0!==e.infection.stage&&e.infection.stage>t||(e.infection.stage=t,e.infection.time=0)}updateInfection(e,t){const i=this.container.actualOptions,n=i.infection,o=i.infection.stages,a=o.length;if(void 0!==e.infection.delay&&void 0!==e.infection.delayStage){const i=e.infection.delayStage;if(i>a||i<0)return;e.infection.delay>=1e3*n.delay?(e.infection.stage=i,e.infection.time=0,delete e.infection.delay,delete e.infection.delayStage):e.infection.delay+=t}else delete e.infection.delay,delete e.infection.delayStage;if(void 0!==e.infection.stage&&void 0!==e.infection.time){const i=o[e.infection.stage];void 0!==i.duration&&i.duration>=0&&e.infection.time>1e3*i.duration?this.nextInfectionStage(e):e.infection.time+=t}else delete e.infection.stage,delete e.infection.time}nextInfectionStage(e){const t=this.container.actualOptions,i=t.infection.stages.length;if(!(i<=0||void 0===e.infection.stage)&&(e.infection.time=0,i<=++e.infection.stage)){if(t.infection.cure)return delete e.infection.stage,void delete e.infection.time;e.infection.stage=0,e.infection.time=0}}}class c{constructor(e){this.container=e,this.container.infecter=new a(this.container)}particlesSetup(){var t;const i=this.container.actualOptions;for(let n=0;n<i.infection.infections;n++){const i=this.container.particles.array.filter((e=>{const t=e;return t.infection||(t.infection={}),void 0===t.infection.stage})),n=(0,e.itemFromArray)(i);null===(t=this.container.infecter)||void 0===t||t.startInfection(n,0)}}particleFillColor(e){const t=e,i=this.container.actualOptions;if(!t.infection)return;const n=t.infection.stage,o=i.infection.stages;return void 0!==n?o[n].color:void 0}particleStrokeColor(e){return this.particleFillColor(e)}}class s extends e.ParticlesInteractorBase{constructor(e){super(e)}isEnabled(){var e,t;const i=this.container.actualOptions;return null!==(t=null===(e=null==i?void 0:i.infection)||void 0===e?void 0:e.enable)&&void 0!==t&&t}reset(){}async interact(e,t){var i,n;const o=this.container.infecter;if(!o)return;if(o.updateInfection(e,t.value),void 0===e.infection.stage)return;const a=this.container,c=a.actualOptions.infection;if(!c.enable||c.stages.length<1)return;const s=c.stages[e.infection.stage],r=a.retina.pixelRatio,l=2*e.getRadius()+s.radius*r,f=e.getPosition(),d=null!==(i=s.infectedStage)&&void 0!==i?i:e.infection.stage,u=a.particles.quadTree.queryCircle(f,l),g=s.rate,v=u.length;for(const t of u){const i=t;if(!(i===e||i.destroyed||i.spawning||void 0!==i.infection.stage&&i.infection.stage===e.infection.stage)&&Math.random()<g/v)if(void 0===i.infection.stage)o.startInfection(i,d);else if(i.infection.stage<e.infection.stage)o.updateInfectionStage(i,d);else if(i.infection.stage>e.infection.stage){const t=c.stages[i.infection.stage],a=null!==(n=null==t?void 0:t.infectedStage)&&void 0!==n?n:i.infection.stage;o.updateInfectionStage(e,a)}}}}class r{constructor(){this.id="infection"}getPlugin(e){return new c(e)}needsPlugin(e){var t,i;return null!==(i=null===(t=null==e?void 0:e.infection)||void 0===t?void 0:t.enable)&&void 0!==i&&i}loadOptions(e,t){if(!this.needsPlugin(t))return;const n=e;let o=n.infection;void 0===(null==o?void 0:o.load)&&(n.infection=o=new i),o.load(null==t?void 0:t.infection)}}async function l(e){const t=new r;await e.addPlugin(t),await e.addInteractor("particlesInfection",(e=>new s(e)))}}(),o}()}));