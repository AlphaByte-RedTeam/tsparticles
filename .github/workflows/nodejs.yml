name: Node.js CI
on:
  push:
    branches:
      - main
      - dev
      - v1
  pull_request:
    branches:
      - main
      - dev
      - v1

jobs:
  main:
    env:
      firebaseToken: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout [main]
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      #- name: Get yarn cache directory path
      #  id: yarn-cache-dir-path
      #  run: echo "::set-output name=dir::$(yarn cache dir)"
      #- uses: actions/cache@v3
      #  id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #  with:
      #    path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #    key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #    restore-keys: |
      #      ${{ runner.os }}-yarn-
      - run: yarn install
      - run: npx lerna bootstrap
      - run: npx lerna run build:ci #--concurrency 3
      #- run: lerna test
      #- name: Codacy Coverage Reporter
      #  uses: codacy/codacy-coverage-reporter-action@0.2.0
      #  with:
      #    project-token: ${{ secrets.CodacyCoverageToken }}
      #    coverage-reports: coverage/lcov.info
      - if: env.firebaseToken != '' && github.ref == 'refs/heads/main'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
          projectId: tsparticles
          channelId: live

      - if: env.firebaseToken != '' && github.ref == 'refs/heads/staging'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
          projectId: tsparticles
          channelId: next

      - if: env.firebaseToken != '' && github.ref == 'refs/heads/dev'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
          projectId: tsparticles
          channelId: dev

      - if: env.firebaseToken != '' && contains(github.ref, 'refs/pull') && github.actor == 'matteobruni'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
          projectId: tsparticles
  pr:
    env:
      firebaseToken: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      #- name: Get yarn cache directory path
      #  id: yarn-cache-dir-path
      #  run: echo "::set-output name=dir::$(yarn cache dir)"
      #- uses: actions/cache@v3
      #  id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      #  with:
      #    path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #    key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #    restore-keys: |
      #      ${{ runner.os }}-yarn-
      - run: yarn install
      - run: npx lerna bootstrap
      - run: npx lerna run build:ci #--concurrency 3
      - run: echo ${{ github.repository_owner }}
      - run: echo ${{ github.actor }}
      #- run: lerna test
      #- name: Codacy Coverage Reporter
      #  uses: codacy/codacy-coverage-reporter-action@0.2.0
      #  with:
      #    project-token: ${{ secrets.CodacyCoverageToken }}
      #    coverage-reports: coverage/lcov.info
      - if: env.firebaseToken != '' && github.ref == 'refs/heads/main'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
          projectId: tsparticles
          channelId: live

      - if: env.firebaseToken != '' && github.ref == 'refs/heads/staging'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
          projectId: tsparticles
          channelId: next

      - if: env.firebaseToken != '' && github.ref == 'refs/heads/dev'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
          projectId: tsparticles
          channelId: dev

      - if: env.firebaseToken != '' && contains(github.ref, 'refs/pull') && github.actor == 'matteobruni'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_TSPARTICLES }}'
          projectId: tsparticles
